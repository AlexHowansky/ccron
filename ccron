#!/bin/bash

# Create the subdirectory for a specific host.
function _ccron_mkdir
{
    mkdir -p ${CCRON_ARCHIVE}/${1} || exit 1
}

# Verify that we have a crontab for a specific user and host.
function _ccron_verify_local
{
    [ ${#} -eq 2 ] || exit 1
    if [ ! -s ${CCRON_ARCHIVE}/${2}/${1} ]
    then
        echo "There is no local crontab for ${1}@${2}"
        exit 1
    fi
}

# Show help and exit.
function ccron_help
{
    cat << EOF
Usage: ${0} <command> [<options>]

Commands:

    help
        Print this list.

    list [<host> [<host>...]]
        List all local crontabs. If <host> is given, list for <host>.

    show <user> <host>
        Show the local crontab for <user> on <host>.

    edit <user> <host>
        Edit the local crontab for <user> on <host>

    ignore <user> <host>
        Remove the local crontab for <user> on <host> and leave the remote intact.

    drop <user> <host>
        Remove the local and remote crontabs for <user> on <host>.

    pull <user> <host>
        Import the remote crontab for <user> on <host> into the local database.

    push <user> <host>
        Export the local crontab for <user> on <host> to the remote host.

    pushall [<host> [<host>...]]
        Export all local crontabs. If <host> is given, export all crontabs for <host>.

EOF
    exit 1
}

# Edit the config file, creating it if it doesn't exist.
function ccron_config
{
    [ -s ~/.ccronrc ] || cat >~/.ccronrc << "EOF"
# Where the crontab files should be stored.
CCRON_ARCHIVE=~/.ccron

# Where we can store temporary files.
CCRON_TEMP=/tmp

# Should we automatically pull a new crontab when asked to edit one that we don't currently have?
CCRON_AUTOPULL=0

# Should we automatically push newly saved edits to the remote host?
CCRON_AUTOPUSH=0
EOF
    ${EDITOR} ~/.ccronrc
}

# List the local crontabs that we have.
function ccron_list
{
    for HOSTNAME in ${@:-$(ls ${CCRON_ARCHIVE})}
    do
        for USERNAME in $(ls ${CCRON_ARCHIVE}/${HOSTNAME})
        do
            echo "${USERNAME}@${HOSTNAME}"
        done
    done
}

# Show the contents of a specific local crontab.
function ccron_show
{
    [ ${#} -eq 2 ] || ccron_help
    _ccron_verify_local ${1} ${2}
    cat ${CCRON_ARCHIVE}/${2}/${1}
}

# Edit a specific local crontab.
function ccron_edit
{
    [ ${#} -eq 2 ] || ccron_help
    if [ ! -s ${CCRON_ARCHIVE}/${2}/${1} -a ${CCRON_AUTOPULL} -eq 1 ]
    then
        echo "Autopulling..."
        ccron_pull ${1} ${2}
    fi
    _ccron_mkdir ${2}
    ${EDITOR} ${CCRON_ARCHIVE}/${2}/${1}
    if [ ${CCRON_AUTOPUSH} -eq 1 ]
    then
        echo "Autopushing..."
        ccron_push ${1} ${2}
    fi
}

# Stop managing a specific crontab.
function ccron_ignore
{
    [ ${#} -eq 2 ] || ccron_help
    _ccron_verify_local ${1} ${2}
    rm ${CCRON_ARCHIVE}/${2}/${1}
}

# Drop a specific crontab.
function ccron_drop
{
    ccron_ignore ${1} ${2}
    ssh -l ${1} ${2} 'crontab -r'
}

# Pull a crontab from a particular user and host into the local database.
function ccron_pull
{
    [ ${#} -eq 2 ] || ccron_help
    ssh -l ${1} ${2} "crontab -l" >${CCRON_TEMP}/ccron.${$} 2>/dev/null

    # Strip off our warning header for local storage.
    grep -q "^# DO NOT EDIT - this crontab maintained via ccron by" ${CCRON_TEMP}/ccron.${$}
    if [ ${?} -eq 0 ]
    then
        tail -n +5 ${CCRON_TEMP}/ccron.${$} >${CCRON_TEMP}/ccron.${$}.new
        mv ${CCRON_TEMP}/ccron.${$}.new ${CCRON_TEMP}/ccron.${$}
    fi

    if [ -s ${CCRON_TEMP}/ccron.${$} ]
    then
        _ccron_mkdir ${2}
        mv ${CCRON_TEMP}/ccron.${$} ${CCRON_ARCHIVE}/${2}/${1}
        cat ${CCRON_ARCHIVE}/${2}/${1}
    else
        echo "No remote crontab found for ${1}@${2}."
        rm ${CCRON_TEMP}/ccron.${$}
    fi
}

# Push a local crontab to a remote user and host.
function ccron_push
{
    [ ${#} -eq 2 ] || ccron_help
    _ccron_verify_local ${1} ${2}
    echo "${1}@${2}: "
    {
        echo -e "#\n# DO NOT EDIT - this crontab maintained via ccron by $(whoami)@$(hostname)\n#\n";
        cat ${CCRON_ARCHIVE}/${2}/${1};
    } | ssh -l ${1} ${2} 'EDITOR="cat>" crontab -e'
    echo
}

# Push all local crontabs.
function ccron_pushall
{
    for HOSTNAME in ${@:-$(ls ${CCRON_ARCHIVE})}
    do
        for USERNAME in $(ls ${CCRON_ARCHIVE}/${HOSTNAME})
        do
            ccron_push ${USERNAME} ${HOSTNAME}
        done
    done
}

# Make sure we have an EDITOR.
if [ -z ${EDITOR} ]
then
    echo "Please set the EDITOR environment variable to use ccron."
    exit 1
fi

# If this is the first run, create the config file and show the help.
if [ ! -s ~/.ccronrc ]
then
    ccron_config
    ccron_help
fi

# Nothing to do, show the help.
[ ${#} -eq 0 ] && ccron_help

# Source the config file.
. ~/.ccronrc

# Make sure the archive directory has been created.
if [ ! -d ${CCRON_ARCHIVE} ]
then
    _ccron_mkdir
fi

# Figure out what command we're running.
COMMAND=${1}
FUNCTION="ccron_${COMMAND}"
shift

# If it's unknown, show the help.
[ "$(type -t ${FUNCTION})" == "function" ] || ccron_help

# Otherwise, run it.
${FUNCTION} ${@}
